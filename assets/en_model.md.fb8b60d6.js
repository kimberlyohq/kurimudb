import{o as n,c as s,a}from"./app.80c0d1c4.js";const e='{"title":"Model","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"Getting Started","slug":"getting-started"},{"level":2,"title":"Creating the Model","slug":"creating-the-model"},{"level":2,"title":"Model Methods","slug":"model-methods"},{"level":2,"title":"Set Model","slug":"set-model"},{"level":2,"title":"Populating the Model","slug":"populating-the-model"},{"level":2,"title":"Deep Clone","slug":"deep-clone"},{"level":2,"title":"Storage Class API","slug":"storage-class-api"}],"relativePath":"en/model.md","lastUpdated":1621392575250}',t={},p=a('<h1 id="model"><a class="header-anchor" href="#model" aria-hidden="true">#</a> Model</h1><p>In the preamble, we introduced the basic usage and used the zero config library, <code>kurimudb-zero-config</code>. Normally, this would have already satisfied our needs.</p><p>However, if we are currently developing a complex single-page application, do we really want to save various kinds of data messily in a single object? This is not a good idea.</p><p>This is the time for <strong>Model feature</strong> to make its grand debutÔºÅ üéâ</p><h2 id="getting-started"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h2><p>Models are the core of saving and managing your data. The <code>memory</code>„ÄÅ<code>local</code>„ÄÅ<code>cookie</code> and <code>db</code> object we previously used in our zero config library are actually all models!</p><p>Before we continue, let&#39;s install Kurimudb:</p><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> i kurimudb@4\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="creating-the-model"><a class="header-anchor" href="#creating-the-model" aria-hidden="true">#</a> Creating the Model</h2><p>Creating a model is actually very simple. You only need to inherit the Kurimudb&#39;s Model class.</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// Create a /models/configState.js file</span>\n<span class="token comment">// We can use it to store data related to user configuration.</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Just like this, you will have a <code>ConfigState</code> model. <code>ConfigState</code> is a <strong>Key-Value Pair</strong> model and using it is even simpler:</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> configState <span class="token keyword">from</span> <span class="token string">&quot;./models/configState.js&quot;</span><span class="token punctuation">;</span>\n\nconfigState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Writing..</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reading..</span>\n<span class="token keyword">delete</span> configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>say<span class="token punctuation">;</span> <span class="token comment">// Deleting..</span>\n<span class="token string">&quot;say&quot;</span> <span class="token keyword">in</span> configState<span class="token punctuation">;</span> <span class="token comment">// Determining whether it exists..</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Through the constructor, you can self-define the options for the model:</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// /models/configState.js</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// The name of the model must be unique globally</span>\n      <span class="token comment">// If undefined, the class name of such classes will be used</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;OurModel&quot;</span><span class="token punctuation">,</span>\n      <span class="token comment">// The primary type of the model </span>\n      <span class="token comment">// If undefined, the key-value pair model will use &quot;string&quot;, while the set model will use &quot;number&quot;</span>\n      type<span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="model-methods"><a class="header-anchor" href="#model-methods" aria-hidden="true">#</a> Model Methods</h2><p>We can add <strong>any methods</strong> in the model class! Just like:</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// /models/configState.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ..</span>\n\n  <span class="token comment">// Add a method</span>\n  <span class="token function">setFoo</span><span class="token punctuation">(</span><span class="token parameter">bar<span class="token punctuation">,</span> foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Various logic</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>bar <span class="token operator">=</span> bar<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// The method can also be asychronous</span>\n  <span class="token keyword">async</span> <span class="token function">calcBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ..</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">ConfigState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>We can directly call the methods when using it.</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> configState <span class="token keyword">from</span> <span class="token string">&quot;./models/configState.js&quot;</span><span class="token punctuation">;</span>\n\nconfigState<span class="token punctuation">.</span><span class="token function">setFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> configState<span class="token punctuation">.</span><span class="token function">calcBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="set-model"><a class="header-anchor" href="#set-model" aria-hidden="true">#</a> Set Model</h2><p>Previously, the models were all key-value values model, which acts like an object when used.</p><div class="language-js line-numbers-mode"><pre><code>configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Sometimes, we may need a set. When adding new data, the primary key will auto increment, somewhat similar to an array:</p><div class="language-js line-numbers-mode"><pre><code>configState<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">700</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>The primary use cases for set models are various lists, such as caching the list of videos, list of user drafts etc‚Ä¶‚Ä¶Next, suppose we are currently developing a notes application, and we need to save the user&#39;s notes locally.</p><p>Let&#39;s create a <code>NoteList</code> model:</p><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><br><br><div class="highlighted">¬†</div><br><br><br></div><pre><code><span class="token comment">// Create a /models/noteList.js file</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Inherit Models.collection to make it become a set model</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">NoteList</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>collection</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>When using, the primary key of data created through <code>insert</code> method will be auto incremented</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> noteList <span class="token keyword">from</span> <span class="token string">&quot;@/models/noteList&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> note1 <span class="token operator">=</span> noteList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;This is the content of note 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> note2 <span class="token operator">=</span> noteList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;This is the content of note 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noteList<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// echo &quot;This is the content of note 1&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noteList<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// echo &quot;This is the content of note 2&quot;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>You can also use the <code>all</code> function to retrieve all the data in this set model:</p><div class="language-js line-numbers-mode"><pre><code>noteList<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">Tips:</p><ol><li>The index of set model starts from 1 , which is different from arrays. It is designed in this manner to make it more compatible with IndexedDB, which also starts from 1.</li><li>When deleting any value in the set model, it will not cause any changes to the primary key of other values, which is different from how array works. That is, the primary key can be regarded as a constant.</li><li>For set models, the primary key data type must be a <code>number</code>.</li></ol></div><h2 id="populating-the-model"><a class="header-anchor" href="#populating-the-model" aria-hidden="true">#</a> Populating the Model</h2><p>We may want to populate the model with some initial values. Example, we are currently developing an e-book application. When the user first utilize the application, we hope to set a default font size, theme, page flipping mode......</p><p>In this case, we can use the <code>seed</code> method in the constructor method to populate the model with initial valuesÔºö</p><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted">¬†</div><div class="highlighted">¬†</div><div class="highlighted">¬†</div><div class="highlighted">¬†</div><br><br><br></div><pre><code><span class="token comment">// /models/configState.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ..</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>For <strong>Key-Value Pair Model</strong>Ôºåyou can pass in an object to simplify the population of the modelÔºö</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span>\n  baz<span class="token operator">:</span> <span class="token string">&quot;qux&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Equivalent toÔºö</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">&quot;qux&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>For <strong>Set Model</strong>Ôºåyou can pass in an array to simplify the population processÔºö</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Equivalent toÔºö</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>By default, everytime you run your web page, the data will be populated once.</p><p>If the model has the <a href="/persistence.html">persistence</a> configuration setÔºåthen, the model will only be populated during the initial run of the web page by the user.</p><h2 id="deep-clone"><a class="header-anchor" href="#deep-clone" aria-hidden="true">#</a> Deep Clone</h2><p>Before we explore further, let&#39;s discuss how copying in Javascript works: When you assign a object or array to another variable, you are actually <strong>passing the reference of the original variable</strong>. Please see the example below: Ôºö</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> number1 <span class="token operator">=</span> <span class="token number">965</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> number2 <span class="token operator">=</span> number1<span class="token punctuation">;</span>\nnumber1 <span class="token operator">=</span> <span class="token number">996</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// echo 965</span>\n\n<span class="token keyword">let</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">965</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> object2 <span class="token operator">=</span> object1<span class="token punctuation">;</span>\nobject1<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">996</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// echo 996</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>This characteristic of Javascript will cause <strong>side effects</strong>, becoming the root causes of bugs. ThereforeÔºåto ensure that the data is immutable,we will perform a <strong>deep clone</strong> of the data when you store data through Kurimudb. When reading data, it is completely independent of the original value.</p><p>For <strong>plain object</strong> Ôºåthere is nothing to worry about deep cloning. However, for other objects, such as <code>new Set(...)</code> Êàñ <code>new Blob(...)</code>Ôºåas we can only deep clone <strong>enumerable properties</strong>Ôºådeep clone will result in data loss.</p><p>Therefore, we provided a whitelist. If your data or internals contains such objects, then Kurimudb would not deep clone them.</p><div class="language-yaml line-numbers-mode"><pre><code><span class="token punctuation">-</span> Boolean\n<span class="token punctuation">-</span> String\n<span class="token punctuation">-</span> Date\n<span class="token punctuation">-</span> RegExp\n<span class="token punctuation">-</span> Blob\n<span class="token punctuation">-</span> File\n<span class="token punctuation">-</span> FileList\n<span class="token punctuation">-</span> ArrayBuffer\n<span class="token punctuation">-</span> DataView\n<span class="token punctuation">-</span> Uint8ClampedArray\n<span class="token punctuation">-</span> ImageData\n<span class="token punctuation">-</span> Map\n<span class="token punctuation">-</span> Set\n<span class="token punctuation">-</span> Symbol\n<span class="token punctuation">-</span> HTMLDivElement\n<span class="token comment"># Determined through `yourObj.constructor.name`</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>If you wish to overwrite this whitelist, you can:</p><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted">¬†</div><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      intrinsicTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;File&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FileList&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>If you want to deep clone all objects, you can directly pass in an empty array:</p><div class="language-js line-numbers-mode"><pre><code>intrinsicTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>If you do not want to deep clone any of the objects, you can pass in <code>false</code>:</p><div class="language-js line-numbers-mode"><pre><code>intrinsicTypes<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>If you wish to manually perform deep clone, you can use the <code>deepClone</code> function of the model object.</p><div class="language-js line-numbers-mode"><pre><code>yourModel<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span>yourOldObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="storage-class-api"><a class="header-anchor" href="#storage-class-api" aria-hidden="true">#</a> Storage Class API</h2><p>You can also use similar <a href="https://developer.mozilla.org/docs/Web/API/Storage" target="_blank" rel="noopener noreferrer">Storage</a> API to insert, delete, modify data items.</p><div class="language-js line-numbers-mode"><pre><code>local<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create it</span>\n<span class="token keyword">let</span> say <span class="token operator">=</span> local<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// retrieve it</span>\nlocal<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delete it</span>\nlocal<span class="token punctuation">.</span><span class="token function">subscribeItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// subscribe it</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>üìú This feature requries Version (^4.0.0).</p></blockquote>',62);t.render=function(a,e,t,o,c,l){return n(),s("div",null,[p])};export default t;export{e as __pageData};
