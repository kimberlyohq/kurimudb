import{o as n,c as s,a}from"./app.80c0d1c4.js";const p='{"title":"从 v3 迁移","description":"","frontmatter":{},"headers":[{"level":2,"title":"破坏性变化","slug":"破坏性变化"},{"level":3,"title":"模型定义","slug":"模型定义"},{"level":3,"title":"模型功能","slug":"模型功能"},{"level":3,"title":"模型订阅","slug":"模型订阅"},{"level":3,"title":"类 Storage Api","slug":"类-storage-api"},{"level":2,"title":"新功能和特性","slug":"新功能和特性"},{"level":3,"title":"简化的模型填充","slug":"简化的模型填充"},{"level":3,"title":"自动订阅功能","slug":"自动订阅功能"},{"level":2,"title":"模型驱动变化","slug":"模型驱动变化"},{"level":3,"title":"LocalStorage","slug":"localstorage"},{"level":3,"title":"Dexie","slug":"dexie"}],"relativePath":"migrations/v3.md","lastUpdated":1621352695269}',e={},t=a('<h1 id="从-v3-迁移"><a class="header-anchor" href="#从-v3-迁移" aria-hidden="true">#</a> 从 v3 迁移</h1><p>Kurimudb 4.x 版本相较于 3.x 版本有许多变化，它们可能是一些新特性，也可能是一些不兼容的更改，本文档会详细为你阐述其中的具体变化。</p><div class="warning custom-block"><p class="custom-block-title">注意事项</p><p>呜呜呜，非常对不起 &gt; &lt;</p><p>从 Kurimudb 4.0 开始，将遵循<a href="https://semver.org/" target="_blank" rel="noopener noreferrer">语义化版本</a>。因此，本份文档将说明从 3.0 到 4.0 的变化。</p></div><h2 id="破坏性变化"><a class="header-anchor" href="#破坏性变化" aria-hidden="true">#</a> 破坏性变化</h2><h3 id="模型定义"><a class="header-anchor" href="#模型定义" aria-hidden="true">#</a> 模型定义</h3><p>4.x 版本中在定义模型上，增加了一些默认值和自动推断。</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">class</span> ConfigState <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span><span class="token operator">&lt;</span>\n<span class="token comment">// 4.x 版本中，定义 data 的类型不再是必须的，默认为 Record&lt;string | number, any&gt;</span>\n<span class="token comment">// Record&lt;string | number, any&gt;</span>\n<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 4.x 版本中，模型名称可省略。省略将使用当前类的类名</span>\n      <span class="token comment">// name: &quot;ConfigState&quot;, </span>\n      <span class="token comment">// 4.x 版本中，类型可省略。若省略，键值对模型将为 &#39;string&#39;，集合模型将为 &#39;number&#39;</span>\n      <span class="token comment">// type: &quot;string&quot;,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="模型功能"><a class="header-anchor" href="#模型功能" aria-hidden="true">#</a> 模型功能</h3><ul><li><p><code>yourModel.all()</code> 函数变更为仅在集合模型下可用。</p></li><li><p>当取模型中不存在的数据时，原先会获得 <code>null</code>，现在会获得 <code>undefined</code>。</p></li></ul><h3 id="模型订阅"><a class="header-anchor" href="#模型订阅" aria-hidden="true">#</a> 模型订阅</h3><p>原先批量订阅函数的返回值，是一个包含了所有退订的各个值的数组，现在返回值被变更为一个函数，执行后退订此次批量订阅的全部值。</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// 3.x 版本</span>\n<span class="token keyword">const</span> unsubscribeFunctions <span class="token operator">=</span> <span class="token function">batch$</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> unsubscribe <span class="token keyword">of</span> unsubscribeFunctions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 4.x 版本</span>\n<span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> <span class="token function">batch$</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="类-storage-api"><a class="header-anchor" href="#类-storage-api" aria-hidden="true">#</a> 类 Storage Api</h3><p>现在类 Storage Api 中的 <code>subscribeItem</code> 函数，语法变更如下：</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// 3.x 版本</span>\nlocal<span class="token punctuation">.</span><span class="token function">subscribeItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 4.x 版本</span>\nlocal<span class="token punctuation">.</span><span class="token function">subscribeItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="新功能和特性"><a class="header-anchor" href="#新功能和特性" aria-hidden="true">#</a> 新功能和特性</h2><h3 id="简化的模型填充"><a class="header-anchor" href="#简化的模型填充" aria-hidden="true">#</a> 简化的模型填充</h3><p>除了传入闭包，现在也可以通过传入一个对象或数组，来分别为键值对模型或集合模型进行填充。</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// 键值对模型</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n  baz<span class="token operator">:</span> <span class="token string">&#39;qux&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 相当于：</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">&#39;qux&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// 集合模型</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 相当于：</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="自动订阅功能"><a class="header-anchor" href="#自动订阅功能" aria-hidden="true">#</a> 自动订阅功能</h3><p>当闭包中所使用的值有任一被更改时，都会重新执行一次此闭包：</p><div class="language-js line-numbers-mode"><pre><code><span class="token function">auto$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="模型驱动变化"><a class="header-anchor" href="#模型驱动变化" aria-hidden="true">#</a> 模型驱动变化</h2><blockquote><p>📜 要使用 Kurimudb 4.x 版本，需要将所有驱动的版本同样升级到 4.x。</p></blockquote><h3 id="localstorage"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> LocalStorage</h3><p>LocalStorage 驱动现在支持使用 <code>all()</code> 函数了。</p><h3 id="dexie"><a class="header-anchor" href="#dexie" aria-hidden="true">#</a> Dexie</h3><p>Dexie 驱动的 <code>db</code> 参数传入位置，从原先的定义一个<strong>类成员变量</strong>，变更为在<strong>构造函数</strong>中定义。</p><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br></div><pre><code><span class="token comment">// 3.x 版本</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">class</span> NoteList <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>collection</span> <span class="token punctuation">{</span>\n  db<span class="token operator">:</span> Dexie <span class="token operator">=</span> db<span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted"> </div><br><br><br><br></div><pre><code><span class="token comment">// 4.x 版本</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">class</span> NoteList <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>collection</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n      db<span class="token operator">:</span> db<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',31);e.render=function(a,p,e,o,c,l){return n(),s("div",null,[t])};export default e;export{p as __pageData};
